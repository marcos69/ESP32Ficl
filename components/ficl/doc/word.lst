convert 
sm/rem  
ficl-set-current        
froll   
(flocal)        
2dup    
dup     
set-order       
does>   
[if]    
space   
wid-set-super   
f!      
ficlInstructionInvalid  
repeat  
forget  
postpone        
drop    
(constant)
create-file     
um*     
2constant       
fdup    
ficlInstructionNeg1     
refill  
f*      
locals| 
[endif] 
ficlInstructionNeg2     
f2drop  
f+      
bl      
ficlInstructionNeg3     
ficlInstructionNeg4     
u.      
float>int
f-      
f.      
ficlInstructionNeg5     
wid-set-name    
2local  
ficlInstructionNeg6
f/      
negate  
on-step 
ficlInstructionNeg7     
(@f2Local)      
ficlInstructionNeg8
file-status     
ficlInstructionNeg9     
add-parse-step  
over    
*/      
cd      
strcpy  
+!      
dump    
ficlInstruction0        
f2dup   
ficlInstruction1
exit    
endof   
ficlInstruction2        
[']     
f+i     
user    
ficlInstruction3
user    
r/w     
ficlInstruction4        
>name   
fover   
>float  
?float  
ficlInstruction5        
parse-word      
see-xt  
constant        
u<      
true    
ficlInstruction6        
case    
f<      
(f2constant)    
ficlInstruction7
variable        
hold    
f=      
system  
load    
ficlInstructionF0       
ficlInstruction8        
f>      
ficlInstructionF1       
ficlInstruction9
(fconstant)     
end-locals      
f@      
w!      
oop     
cr      
char+   
accept  
clock   
tuck    
f?dup   
f*i     
search-wordlist 
spaces  
source  
!       
fvalue  
read-file       
while   
base    
#       
-rot    
compare-insensitive
-rot    
false   
abort"  
word    
do      
ficl-vocabulary 
'
f2swap  
(parse-step)    
(       
hex     
?do     
*       
(variable)      
+       
,       
pad     
<#      
(;)     
-       
marker  
.       
wordlist        
get-current     
mod     
f-i     
/       
ficlInstructionNeg10    
ficlInstruction10
loop    
** (colon) **   
ficlInstructionNeg11    
ficlInstruction11       
forget-wid      
(@2Local)       
show-prefixes   
ficlInstructionNeg12    
ficlInstruction12       
step-break      
f0<     
ficlInstructionNeg13    
ficlInstruction13       
resize  
f0=     
include 
ficlInstructionNeg14    
ficlInstruction14       
x.      
source-id       
f0>     
order   
ficlInstructionNeg15
ficlInstruction15       
to      
ficlInstructionNeg16    
ficlInstruction16
.ver    
w@      
pick    
write-file      
(toF2Local)     
only    
:       
(2literal)      
set-current     
;       
body>   
<       
(branch)        
r.s     
2variable       
."      
=       
sprintf 
char    
>       
do-vocabulary
?       
(2constant)     
get-msecs       
@       
get-order       
.(      
*/mod   
max     
fill    
resize-file     
+loop   
move    
<>      
begin   
rshift  
r/o     
f.s     
reposition-file 
type    
leave   
-roll   
rot     
fconstant       
and     
fliteral        
s>d     
(branch0-final) 
f2value
[char]  
f/i     
2drop   
endif   
unloop  
include-file    
(.")    
forth-wordlist
lookup  
previous        
value   
:noname 
f2!     
vocabulary      
objectify
last-word       
break   
then    
emit    
fpick   
i-f     
[       
literal
evaluate        
(loop)  
abs     
?number 
dnegate 
\       
words   
]       
2over   
(branch0)       
ficl-named-wordlist     
rename-file     
env-constant
endcase 
float>  
create  
allot   
end-prefixes    
(@fLocal)       
(@local)
i       
j       
swap    
fm/mod  
>number 
k       
expect  
if      
fallthrough
(@local0)       
/mod    
?object 
m*      
free    
(To2Local0)     
throw   
nUser   
allocate        
f2@     
1+      
2r@     
0<      
0=      
1-      
i/f     
0>      
sign    
{       
(local) 
min     
2>r     
2!      
(branch-final)
clocks/sec      
(@local1)       
hide    
exit-inner      
fswap   
invert  
local   
>search 
quit    
strcat  
hidden  
__tempbase      
2*      
hash    
ficl-wordlist   
2+      
2-      
2/      
[else]  
see     
.s      
again   
2value  
(user)  
brand-wordlist  
count   
(?do)   
read-line       
w/o     
2literal        
?prefix 
(literal)       
also    
(of)    
>body   
(create)
file-size       
(toLocal1)      
lshift  
recurse 
depth   
#>      
(link)  
file-position   
fdrop   
2@      
parse-order     
roll    
>r      
sfind   
(fliteral)      
cell+   
span    
cell-   
fe.     
aligned
strdup  
f-rot   
xor     
open-file       
um/mod  
forth   
(f2local)       
immediate       
(exit)  
definitions     
fdepth  
align   
write-line      
q!      
ficlInstructionFNeg1
f2over  
f+!     
(toLocal0)      
.hash   
random  
(+loop) 
?dup    
save-current
here    
f2constant      
{{      
included        
compile-only    
int>float
delete-file     
parse   
2r>     
until   
fnegate 
(to2Local)      
interpret
c!      
strlen  
c"      
>in     
(toFLocal)      
seed-random     
0<>     
(do)    
spewhash        
wid-get-name    
compare 
ficlInstructionExitInnerLoop
sliteral        
(@2Local0)      
chars   
compile,        
?word   
c,      
catch   
(unlink)        
(c")    
q@      
cells   
.env    
s"      
(does)  
debug-xt        
execute 
else    
decimal 
2swap   
pwd     
of      
[then]  
flush-file      
close-file      
find    
f-roll  
#s      
<prefixes>      
erase   
frot    
** do-does **   
state   
abort   
debug   
r>      
bin     
oo      
search> 
r@      
(2local)        
c@      
doLocal 
or      
start-prefixes
environment?    
within  
nip     
.s-simple       
bye     
empty   
env-2constant
(toLocal)